/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { Collection as CollectionClass, Collection as queryCollectionResolver } from "./models/Collection";
import { Item as ItemClass, Item as queryItemResolver } from "./models/Item";
import { ItemFile as ItemFileClass } from "./models/ItemFile";
import { ZipContent as ZipContentClass } from "./models/ZipContent";
import { itemLike as queryItemLikeResolver } from "./models/ItemLike";
import { search as querySearchResolver } from "./models/SearchConnection";
import { GraphQLSchema, GraphQLObjectType, GraphQLList, GraphQLNonNull, GraphQLString, GraphQLInterfaceType, GraphQLInt, GraphQLBoolean, GraphQLInputObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const ItemLikeType: GraphQLInterfaceType = new GraphQLInterfaceType({
        description: "Under the hood, Collections are just a special type of Item. This interface\nis used in places where either might be returned.",
        name: "ItemLike",
        fields() {
            return {
                collections: {
                    name: "collections",
                    type: new GraphQLList(new GraphQLNonNull(CollectionType))
                },
                description: {
                    name: "description",
                    type: GraphQLString
                },
                files: {
                    name: "files",
                    type: new GraphQLList(new GraphQLNonNull(ItemFileType))
                },
                identifier: {
                    name: "identifier",
                    type: GraphQLString
                },
                title: {
                    name: "title",
                    type: GraphQLString
                },
                url: {
                    name: "url",
                    type: GraphQLString
                }
            };
        },
        resolveType
    });
    const ItemType: GraphQLObjectType = new GraphQLObjectType({
        name: "Item",
        description: "Archive.org is made up of \u201Citems\u201D. An Item is a logical \u201Cthing\u201D that we\nrepresent on one web page on archive.org. An Item can be considered as a\ngroup of files that deserve their own metadata. If the files in an Item have\nseparate metadata, the files should probably be in different Items. An Item\ncan be a book, a song, an album, a dataset, a movie, an image or set of\nimages, etc. Every Item has an identifier that is unique across archive.org.\n\nhttps://archive.org/developers/items.html",
        fields() {
            return {
                collections: {
                    description: "Collections to which this Item belongs.",
                    name: "collections",
                    type: new GraphQLList(new GraphQLNonNull(CollectionType))
                },
                description: {
                    description: "The description of the Item as provided by the uploader.",
                    name: "description",
                    type: GraphQLString
                },
                files: {
                    description: "The files associated with this Collection. This will include the\nCollection's metadata as well as its thumbnail.",
                    name: "files",
                    type: new GraphQLList(new GraphQLNonNull(ItemFileType))
                },
                identifier: {
                    description: "This identifier is a unique string naming the Item.",
                    name: "identifier",
                    type: GraphQLString
                },
                title: {
                    description: "The title of the Item as provided by the uploader.",
                    name: "title",
                    type: GraphQLString
                },
                url: {
                    description: "The URL to view the Item on archive.org.",
                    name: "url",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [ItemLikeType];
        }
    });
    const IFileType: GraphQLInterfaceType = new GraphQLInterfaceType({
        description: "A type which models a downloadable file.",
        name: "IFile",
        fields() {
            return {
                corsUrl: {
                    description: "A URL to download the file. This URL is CORS-enabled, so is safe to use to\n`fetch` this URL from a web browser and inspect the resulting contents.",
                    name: "corsUrl",
                    type: GraphQLString
                },
                downloadUrl: {
                    description: "A URL to download the file. This URL is not CORS-enabled, so it may not be\naccessible from a web browser.",
                    name: "downloadUrl",
                    type: GraphQLString
                },
                filename: {
                    description: "The filename of the file.",
                    name: "filename",
                    type: GraphQLString
                },
                item: {
                    description: "The item or collection to which this file belongs.",
                    name: "item",
                    type: ItemLikeType
                }
            };
        },
        resolveType
    });
    const ZipContentType: GraphQLObjectType = new GraphQLObjectType({
        name: "ZipContent",
        description: "A file contained within a .zip archive within an Item at the Internet\nArchive.",
        fields() {
            return {
                corsUrl: {
                    description: "A URL to download the file. This URL is CORS-enabled, so is safe to use to\n`fetch` this URL from a web browser and inspect the resulting contents.",
                    name: "corsUrl",
                    type: GraphQLString
                },
                downloadUrl: {
                    description: "A URL to download the file. This URL is not CORS-enabled, so it may not be\naccessible from a web browser.",
                    name: "downloadUrl",
                    type: GraphQLString
                },
                filename: {
                    description: "The filename of the file.",
                    name: "filename",
                    type: GraphQLString
                },
                item: {
                    description: "The item or collection to which this file belongs.",
                    name: "item",
                    type: ItemType,
                    resolve(source, _args, context) {
                        return source.item(context);
                    }
                }
            };
        },
        interfaces() {
            return [IFileType];
        }
    });
    const ItemFileType: GraphQLObjectType = new GraphQLObjectType({
        name: "ItemFile",
        description: "A file associated with an Item on archive.org.",
        fields() {
            return {
                corsUrl: {
                    description: "A URL to download the file. This URL is CORS-enabled, so is safe to use to\n`fetch` this URL from a web browser and inspect the resulting contents.",
                    name: "corsUrl",
                    type: GraphQLString
                },
                downloadUrl: {
                    description: "A URL to download the file. This URL is not CORS-enabled, so it may not be\naccessible from a web browser.",
                    name: "downloadUrl",
                    type: GraphQLString
                },
                filename: {
                    description: "The filename of the file.",
                    name: "filename",
                    type: GraphQLString
                },
                format: {
                    description: "A human readable name describing the type of file. Examples include:\n\n- \"Metadata\"\n- \"Archive BitTorrent\"",
                    name: "format",
                    type: GraphQLString
                },
                item: {
                    description: "The item or collection to which this file belongs.",
                    name: "item",
                    type: ItemLikeType,
                    resolve(source, _args, context) {
                        return source.item(context);
                    }
                },
                md5: {
                    description: "Md5 hash of the file.",
                    name: "md5",
                    type: GraphQLString
                },
                zipContent: {
                    description: "If this file is a .zip archive, it may contain multiple files. This field\nwill be null if the file is not a .zip archive, and will contain a list of\nfiles if it is.",
                    name: "zipContent",
                    type: new GraphQLList(new GraphQLNonNull(ZipContentType))
                }
            };
        },
        interfaces() {
            return [IFileType];
        }
    });
    const ItemLikeEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "ItemLikeEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: GraphQLString
                },
                node: {
                    name: "node",
                    type: ItemLikeType
                }
            };
        }
    });
    const PageInfoType: GraphQLObjectType = new GraphQLObjectType({
        name: "PageInfo",
        description: "Information about pagination in a connection.",
        fields() {
            return {
                endCursor: {
                    description: "\"When paginating forwards, the cursor to continue.",
                    name: "endCursor",
                    type: GraphQLString
                },
                hasNextPage: {
                    description: "When paginating forwards, are there more items?",
                    name: "hasNextPage",
                    type: GraphQLBoolean
                },
                hasPreviousPage: {
                    description: "When paginating backwards, are there more items?",
                    name: "hasPreviousPage",
                    type: GraphQLBoolean
                },
                startCursor: {
                    description: "When paginating backwards, the cursor to continue.",
                    name: "startCursor",
                    type: GraphQLString
                }
            };
        }
    });
    const ItemSearchConnectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "ItemSearchConnection",
        description: "Search results for items on archive.org with support for pagination.\n\nPaged by the Advanced Search API: https://archive.org/advancedsearch.php\n\nImplements the `Connection` spec: https://relay.dev/graphql/connections.htm",
        fields() {
            return {
                count: {
                    name: "count",
                    type: GraphQLInt
                },
                edges: {
                    name: "edges",
                    type: new GraphQLList(new GraphQLNonNull(ItemLikeEdgeType)),
                    resolve(source, _args, context) {
                        return source.edges(context);
                    }
                },
                nodes: {
                    name: "nodes",
                    type: new GraphQLList(new GraphQLNonNull(ItemLikeType)),
                    resolve(source, _args, context) {
                        return source.nodes(context);
                    }
                },
                pageInfo: {
                    name: "pageInfo",
                    type: PageInfoType
                }
            };
        }
    });
    const CollectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "Collection",
        description: "All items must be part of a collection. A collection is simply an item with\nspecial characteristics. Currently collections can only be created by\narchive.org staff.",
        fields() {
            return {
                collections: {
                    description: "Collections to which this Collection belongs.",
                    name: "collections",
                    type: new GraphQLList(new GraphQLNonNull(CollectionType))
                },
                description: {
                    description: "The description of the collection as provided by the uploader.",
                    name: "description",
                    type: GraphQLString
                },
                files: {
                    description: "The files associated with this Collection. This will include the\nCollection's metadata as well as its thumbnail.",
                    name: "files",
                    type: new GraphQLList(new GraphQLNonNull(ItemFileType))
                },
                identifier: {
                    description: "This identifier is a unique string identifying the collection.",
                    name: "identifier",
                    type: GraphQLString
                },
                members: {
                    description: "A paginateable list of items in this collection.",
                    name: "members",
                    type: ItemSearchConnectionType,
                    args: {
                        after: {
                            name: "after",
                            type: GraphQLString
                        },
                        first: {
                            name: "first",
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 10
                        }
                    },
                    resolve(source, args, context) {
                        return source.members(context, args.first, args.after);
                    }
                },
                title: {
                    description: "The title of the collection as provided by the uploader.",
                    name: "title",
                    type: GraphQLString
                },
                url: {
                    description: "The URL to view the collection on archive.org.",
                    name: "url",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [ItemLikeType];
        }
    });
    const SearchArgsType: GraphQLInputObjectType = new GraphQLInputObjectType({
        description: "Structured search arguments for the search query.",
        name: "SearchArgs",
        fields() {
            return {
                collection: {
                    description: "The Collection in which to search",
                    name: "collection",
                    type: GraphQLString
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                collection: {
                    description: "Retrieve a collection by its identifier. If the identifier is not a\ncollection, this will error.",
                    name: "collection",
                    type: CollectionType,
                    args: {
                        identifier: {
                            name: "identifier",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args, context) {
                        return queryCollectionResolver.collection(args.identifier, context);
                    }
                },
                item: {
                    description: "Retrieve an Item by its identifier. This will error if the identifier is\nthe identifier of a collection.\n\nSee Query.itemLike for a more general way to retrieve an Item or Collection.",
                    name: "item",
                    type: ItemType,
                    args: {
                        identifier: {
                            name: "identifier",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args, context) {
                        return queryItemResolver.item(args.identifier, context);
                    }
                },
                itemLike: {
                    description: "Retrieve an Item-like by its identifier. The Item-like may be an Item or a\nCollection.",
                    name: "itemLike",
                    type: ItemLikeType,
                    args: {
                        identifier: {
                            name: "identifier",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args, context) {
                        return queryItemLikeResolver(args.identifier, context);
                    }
                },
                search: {
                    description: "Search for Items on the Internet Archive and paginate the results.",
                    name: "search",
                    type: ItemSearchConnectionType,
                    args: {
                        after: {
                            name: "after",
                            type: GraphQLString
                        },
                        args: {
                            name: "args",
                            type: new GraphQLNonNull(SearchArgsType),
                            defaultValue: {}
                        },
                        first: {
                            name: "first",
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 10
                        },
                        query: {
                            name: "query",
                            type: GraphQLString
                        }
                    },
                    resolve(_source, args, context) {
                        return querySearchResolver(context, args.query, args.first, args.args, args.after);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [IFileType, ItemLikeType, SearchArgsType, CollectionType, ItemType, ItemFileType, ItemLikeEdgeType, ItemSearchConnectionType, PageInfoType, QueryType, ZipContentType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(CollectionClass, "Collection");
typeNameMap.set(ItemClass, "Item");
typeNameMap.set(ItemFileClass, "ItemFile");
typeNameMap.set(ZipContentClass, "ZipContent");
function resolveType(obj: any): string {
    if (typeof obj.__typename === "string") {
        return obj.__typename;
    }
    let prototype = Object.getPrototypeOf(obj);
    while (prototype) {
        const name = typeNameMap.get(prototype.constructor);
        if (name != null) {
            return name;
        }
        prototype = Object.getPrototypeOf(prototype);
    }
    throw new Error("Cannot find type name.");
}
