# Schema generated by Grats (https://grats.capt.dev)
# Do not manually edit. Regenerate by running `npx grats`.
"""A type which models a downloadable file."""
interface IFile {
  """
  A URL to download the file. This URL is CORS-enabled, so is safe to use to
  `fetch` this URL from a web browser and inspect the resulting contents.
  """
  corsUrl: String
  """
  A URL to download the file. This URL is not CORS-enabled, so it may not be
  accessible from a web browser.
  """
  downloadUrl: String
  """The filename of the file."""
  filename: String
  """The item or collection to which this file belongs."""
  item: ItemLike
}

"""
Under the hood, Collections are just a special type of Item. This interface
is used in places where either might be returned.
"""
interface ItemLike {
  """Collections to which this ItemLike belongs."""
  collections: [Collection!]
  """The description of the Item as provided by the uploader."""
  description: String
  """The files associated with this Item."""
  files(
    """
    Include files which are likely to be generated by the Internet Archive
    such as thumbnail images and XML/SQLite metadata files.
    """
    includeMetadata: Boolean
  ): [ItemFile!]
  """This identifier is a unique string naming the Item."""
  identifier: String
  """The Item's thumbnail file image."""
  thumbnail: ItemFile
  """The title of the Item as provided by the uploader."""
  title: String
  """The URL to view the Item on archive.org."""
  url: String
}

"""Structured search arguments for the search query."""
input SearchArgs {
  """The Collection in which to search"""
  collection: String
}

"""
All items must be part of a collection. A collection is simply an item with
special characteristics. Currently collections can only be created by
archive.org staff.
"""
type Collection implements ItemLike {
  """Collections to which this Collection belongs."""
  collections: [Collection!]
  """The description of the collection as provided by the uploader."""
  description: String
  """
  The files associated with this Collection. This will include the
  Collection's metadata as well as its thumbnail.
  """
  files(
    """
    Include files which are likely to be generated by the Internet Archive
    such as thumbnail images and XML/SQLite metadata files.
    """
    includeMetadata: Boolean
  ): [ItemFile!]
  """This identifier is a unique string identifying the collection."""
  identifier: String
  """A paginateable list of items in this collection."""
  members(after: String, first: Int! = 10): ItemSearchConnection
  """The Collection's thumbnail file image."""
  thumbnail: ItemFile
  """The title of the collection as provided by the uploader."""
  title: String
  """The URL to view the collection on archive.org."""
  url: String
}

"""
Archive.org is made up of “items”. An Item is a logical “thing” that we
represent on one web page on archive.org. An Item can be considered as a
group of files that deserve their own metadata. If the files in an Item have
separate metadata, the files should probably be in different Items. An Item
can be a book, a song, an album, a dataset, a movie, an image or set of
images, etc. Every Item has an identifier that is unique across archive.org.

https://archive.org/developers/items.html
"""
type Item implements ItemLike {
  """Collections to which this Item belongs."""
  collections: [Collection!]
  """The description of the Item as provided by the uploader."""
  description: String
  """The files associated with this Item."""
  files(
    """
    Include files which are likely to be generated by the Internet Archive
    such as thumbnail images and XML/SQLite metadata files.
    """
    includeMetadata: Boolean
  ): [ItemFile!]
  """This identifier is a unique string naming the Item."""
  identifier: String
  """The Item's thumbnail file image."""
  thumbnail: ItemFile
  """The title of the Item as provided by the uploader."""
  title: String
  """The URL to view the Item on archive.org."""
  url: String
}

"""A file associated with an Item on archive.org."""
type ItemFile implements IFile {
  """
  A URL to download the file. This URL is CORS-enabled, so is safe to use to
  `fetch` this URL from a web browser and inspect the resulting contents.
  """
  corsUrl: String
  """
  A URL to download the file. This URL is not CORS-enabled, so it may not be
  accessible from a web browser.
  """
  downloadUrl: String
  """The filename of the file."""
  filename: String
  """
  A human readable name describing the type of file. Examples include:
  
  - "Metadata"
  - "Archive BitTorrent"
  """
  format: String
  """The item or collection to which this file belongs."""
  item: ItemLike
  """Md5 hash of the file."""
  md5: String
  """The source of the file."""
  source: String
  """
  If this file is a .zip archive, it may contain multiple files. This field
  will be null if the file is not a .zip archive, and will contain a list of
  files if it is.
  """
  zipContent: [ZipContent!]
}

type ItemLikeEdge {
  cursor: String
  node: ItemLike
}

"""
Search results for items on archive.org with support for pagination.

Provided by the Advanced Search API. See this URL for more information on
query syntax: https://archive.org/advancedsearch.php

Implements the `Connection` spec: https://relay.dev/graphql/connections.htm
"""
type ItemSearchConnection {
  count: Int
  edges: [ItemLikeEdge!]
  nodes: [ItemLike!]
  pageInfo: PageInfo
}

"""Information about pagination in a connection."""
type PageInfo {
  """"When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  """
  Retrieve a collection by its identifier. If the identifier is not a
  collection, this will error.
  """
  collection(identifier: String!): Collection
  """
  Retrieve an Item by its identifier. This will error if the identifier is
  the identifier of a collection.
  
  See Query.itemLike for a more general way to retrieve an Item or Collection.
  """
  item(identifier: String!): Item
  """
  Retrieve an Item-like by its identifier. The Item-like may be an Item or a
  Collection.
  """
  itemLike(identifier: String!): ItemLike
  """Search for Items on the Internet Archive and paginate the results."""
  search(after: String, args: SearchArgs! = {}, first: Int! = 10, query: String): ItemSearchConnection
}

"""
A file contained within a .zip archive within an Item at the Internet
Archive.
"""
type ZipContent implements IFile {
  """
  A URL to download the file. This URL is CORS-enabled, so is safe to use to
  `fetch` this URL from a web browser and inspect the resulting contents.
  """
  corsUrl: String
  """
  A URL to download the file. This URL is not CORS-enabled, so it may not be
  accessible from a web browser.
  """
  downloadUrl: String
  """The filename of the file."""
  filename: String
  """The item or collection to which this file belongs."""
  item: Item
}
